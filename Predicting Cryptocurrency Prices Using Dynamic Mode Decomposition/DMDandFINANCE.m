
%This file uses Dynamic Mode Decomposition to predict the future prices of
%cryptocurrencies

clear all;
close all;

%% Define all interested cryptocurrencies
% Tickers = {'BTC-GBP' 'ETH-GBP' 'BNB-GBP' 'USDT-GBP' 'SOL-GBP' 'DOGE-GBP'...
%     'ADA-GBP'  'HEX-GBP'  'XRP-GBP'   'USDC-GBP' 'LUNA1-GBP' 'DOT-GBP'  ...
%     'AVAX-GBP' 'SHIB-GBP' 'MATIC-GBP' 'CRO-GBP'  'UNI1-GBP'  'LINK-GBP' ...
%     'LTC-GBP'  'ALGO-GBP' 'DAI-GBP'   'BCH-GBP'  'TRX-GBP'   'XLM-GBP'  ...
%     'MANA-GBP' 'ATOM-GBP' 'AXS-GBP'   'VET-GBP'  'SAND-GBP'  'FTT-GBP'  ...
%     'HBAR-GBP' 'FTM-GBP'  'FIL-GBP'   'ENJ-GBP'  'THETA-GBP' 'EGLD-GBP' ...
%     'ETC-GBP'  'XTZ-GBP'  'HNT-GBP'   'XMR-GBP'  'MIOTA-GBP' 'AAVE-GBP' ...
%     'GRT1-GBP' 'EOS-GBP'  'STX-GBP'   'CAKE-GBP' 'ONE1-GBP'  'LRC-GBP'  ...
%     'FLOW-GBP' 'BTT-GBP'}; %50

Tickers = {'ADA-GBP'  'HEX-GBP'  'XRP-GBP'   'USDC-GBP' 'LUNA1-GBP' 'DOT-GBP'  ...
    'AVAX-GBP' 'SHIB-GBP' 'MATIC-GBP' 'CRO-GBP'  'UNI1-GBP'  'LINK-GBP'}; %12

%retrieve historic financial data (prices) from yahoo! finance
% stock = hist_stock_data('01012019', '01012021', Tickers)
stock = hist_stock_data(now-10, now, Tickers)

%visualise the dynamics of crypto behaviour
% figure;
% % Bitcoin
% subplot(1,3,1)
% plot(stock(:,1).Open)
% xlabel('Days')
% ylabel('£')
% title('Bitcoin')
% axis square
% axis tight
% % Ethereum
% subplot(1,3,2)
% plot(stock(:,2).Open)
% xlabel('Days')
% ylabel('£')
% title('Ethereum')
% axis square
% axis tight
% % Dogecoin
% subplot(1,3,3)
% plot(stock(:,3).Open)
% xlabel('Days')
% ylabel('£')
% title('Dogecoin')
% axis square
% axis tight

%construct the dataset of all the historic prices
X = []; %NxM: N is the number of cryptocurrencies and M is the number of snapshots
for i = 1:length(Tickers)
    X = [X stock(:,i).Open];
end
%reconstruct it in a way that currencies are on the rows and time span is
%on the columns. The columns represent the snapshots of the prices.
X = X'; %N >> M

%% Apply Dynamic Mode Decomposition (DMD) on prices data
% create DMD matrices

close all;

X1 = X(:,1:end-1);
X2 = X(:,2:end);

dt = 1;
t = linspace(1,11,length(stock(:,1).Open));

% STEP 1: SVD and rank-2 truncation
r = 8; %rank trauncation (2 modes)
[U,S,V] = svd(X1,'econ');
Ur = U(:,1:r);
Sr = S(1:r,1:r);
% %show the percentage of information captured in each mode from the SVD
% figure;
% sigma = diag(Sr);
% semilogy(sigma/trace(Sr),'ko','LineWidth',2)
% xlabel('$r$','interpreter','latex')
% ylabel('$\displaystyle{\sigma_i/\sum_{i=1}^{r} \sigma_i}$','interpreter','latex')
Vr = V(:,1:r);

%Build Atilde and DMD modes: least square matrix/linear operator
Atilde = Ur'*X2*Vr/Sr;
%eigen decomposition
[W,D] = eig(Atilde); %eigenvectors and eigenvalues
%DMD spatial modes 
Phi = X2*Vr/Sr*W; 
% %visualise the DMD modes 
% bar(real(Phi(:,1)))
%DMD eigenvalues spectra
lambda = diag(D);
omega = log(lambda)/dt; %frequency
%check the eignevalues that all of them imaginary
figure;
for ii = 1:length(omega(:,1))
    plot(real(omega(ii,:)),imag(omega(ii,:)),'r*','Linewidth',2)
    hold on
    xlabel('Real')
    ylabel('Imaginary')
end

% reconstruction of modes/function in time
% compute DMD solution
x1 = X(:,1); %t=0
b = Phi\x1;
time_dynamics = zeros(r,length(t));
for iter = 1:length(length(t))
    time_dynamics(:,iter) = (b.*exp(omega*t(iter)));
end
X_DMD = Phi * time_dynamics; %the full solution of the linear model generated by DMD

%plot time dynamics
figure;
for j = 1:length(time_dynamics(:,1))
    hold on
    subplot(2,5,j)
    plot(t,real(time_dynamics(j,:)),'r','LineWidth',2)
    xlabel('$t$','interpreter','latex')
    set(gca,'fontsize',24)
    axis square
    set(gca,'TickLabelInterpreter','latex')
    hold on
end

% error estimation
for j=1:length(t)
    error(j)=norm(X_DMD(:,j)-X(:,j));
end
figure;
semilogy(t,error,'k','LineWidth',2)
xlim([0 max(t)])
xlabel('Time')
ylabel('Error')
set(gca,'fontsize',14)
set(gca,'TickLabelInterpreter','latex')
 
% % short time prediction
% t2 = linspace(0,8*pi,200);
% time_dynamics2 = zeros(r,length(t2));
% for iter = 1:length(t2)
%     time_dynamics2(:,iter) = (b.*exp(omega*t2(iter)));
% end
% X_DMD2 = Phi * time_dynamics2; %the full future solution of the linear model generated by DMD
% 
% figure(2)
% subplot(1,5,5)
% surfl(real(X_DMD2).')
% shading interp
% colormap bone
% view (-20,60);
% set(gca , 'YTick', numel(t)/8 * (0:8)),
% set(gca , 'Yticklabel',{'0','\pi','2\pi','3\pi','4\pi','5\pi','6\pi','7\pi','8\pi'});
% set(gca , 'XTick', linspace(1,numel(xi),3)),
% set(gca , 'Xticklabel',{'-10', '0', '10'});
% zlabel('$\bf{X}_{\rm{DMD}}(x,2t)$','interpreter','latex')
% xlabel('$x$','interpreter','latex')
% ylabel('$t$','interpreter','latex')
% set(gca,'fontsize',16)
% axis square
% 
% 

