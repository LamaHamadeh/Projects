
%This file uses Dynamic Mode Decomposition to predict the future prices of
%cryptocurrencies

clear all;
close all;

%Define all interested cryptocurrencies
Tickers = {'BTC-GBP' 'ETH-GBP' 'DOGE-GBP'};

%retrieve historic financial data (prices) from yahoo!
% stock = hist_stock_data('01012019', '01012021', Tickers)
stock = hist_stock_data(now-100, now, Tickers)

%visualise the dynamics of crypto behaviour
figure;
% Bitcoin
subplot(1,3,1)
plot(stock(:,1).Open)
xlabel('Days')
ylabel('£')
title('Bitcoin')
axis square
axis tight
% Ethereum
subplot(1,3,2)
plot(stock(:,2).Open)
xlabel('Days')
ylabel('£')
title('Ethereum')
axis square
axis tight
% Dogecoin
subplot(1,3,3)
plot(stock(:,3).Open)
xlabel('Days')
ylabel('£')
title('Dogecoin')
axis square
axis tight

%construct the dataset of all the historic prices
X = [];
for i = 1:length(Tickers)
    X = [X stock(:,i).Open];
end
%reconstruct it in a way that currencies are on the rows and time span is
%on the columns. The columns represent the snapshots of the prices.
X = X';

% %Apply Dynamic Mode Decomposition (DMD) on prices data
% % create DMD matrices
% X1 = X(:,1:end-1);
% X2 = X(:,2:end);
% 
% % STEP 1: SVD and rank-2 truncation
% r = 2; %rank trauncation (2 modes)
% [U,S,V] = svd(X1,'econ');
% Ur = U(:,1:r);
% Sr = S(1:r,1:r);
% Vr = V(:,1:r);
% 
% %Build Atilde and DMD modes: least square matrix/linear operator
% Atilde = Ur'*X2*Vr/Sr;
% %eigen decomposition
% [W,D] = eig(Atilde); %eigenvectors and eigenvalues
% %DMD spatial modes 
% Phi = X2*Vr/Sr*W; 
% %DMD eigenvalues spectra
% lambda = diag(D);
% dt = 1; %1 day interval
% t = length(stock(:,1).Open(:,1));
% omega = log(lambda)/dt; %frequency
% 
% % reconstruction of modes/function in time
% % compute DMD solution
% x1 = X(:,1); %t=0
% b = Phi\x1;
% time_dynamics = zeros(r,length(t));
% for iter = 1:length(t)
%     time_dynamics(:,iter) = (b.*exp(omega*t(iter)));
% end
% X_DMD = Phi * time_dynamics; %the full solution of the linear model generated by DMD
% 
% 
% %plot time dynamics
% figure;
% %mode 1
% plot(t,time_dynamics(1,:),'r','LineWidth',2)
% xlabel('$t$','interpreter','latex')
% set(gca,'fontsize',24)
% axis square
% set(gca,'TickLabelInterpreter','latex')
% figure;
% %mode 2
% plot(t,time_dynamics(2,:),'r','LineWidth',2)
% xlabel('$t$','interpreter','latex')
% set(gca,'fontsize',24)
% axis square
% set(gca,'TickLabelInterpreter','latex')
% 
% % subplot(1,5,4)
% % figure;
% % surfl(real(X_DMD).')
% % shading interp
% % colormap bone
% % view (-20,60);
% % set(gca , 'YTick', numel(t)/4 * (0:4)),
% % set(gca , 'Yticklabel',{'0','\pi','2\pi','3\pi','4\pi'});
% % set(gca , 'XTick', linspace(1,numel(xi),3)),
% % set(gca , 'Xticklabel',{'-10', '0', '10'});
% % zlabel('$\bf{X}_{\rm{DMD}}(x,t)$','interpreter','latex')
% % xlabel('$x$','interpreter','latex')
% % ylabel('$t$','interpreter','latex')
% % set(gca,'fontsize',16)
% % axis square
% 
% %check the eignevalues that all of them imaginary
% figure;
% plot(real(omega(1,:)),imag(omega(1,:)),'r*','Linewidth',2)
% hold on
% plot(real(omega(2,:)),imag(omega(2,:)),'r*','Linewidth',2)
% xlabel('Real')
% ylabel('Imaginary')
% % xlim([0 0.2])
% % ylim([2 3])
% 
% % short time prediction
% t2 = linspace(0,8*pi,200);
% time_dynamics2 = zeros(r,length(t2));
% for iter = 1:length(t2)
%     time_dynamics2(:,iter) = (b.*exp(omega*t2(iter)));
% end
% X_DMD2 = Phi * time_dynamics2; %the full future solution of the linear model generated by DMD
% 
% % figure(1)
% % subplot(1,5,5)
% % surfl(real(X_DMD2).')
% % shading interp
% % colormap bone
% % view (-20,60);
% % set(gca , 'YTick', numel(t)/8 * (0:8)),
% % set(gca , 'Yticklabel',{'0','\pi','2\pi','3\pi','4\pi','5\pi','6\pi','7\pi','8\pi'});
% % set(gca , 'XTick', linspace(1,numel(xi),3)),
% % set(gca , 'Xticklabel',{'-10', '0', '10'});
% % zlabel('$\bf{X}_{\rm{DMD}}(x,2t)$','interpreter','latex')
% % xlabel('$x$','interpreter','latex')
% % ylabel('$t$','interpreter','latex')
% % set(gca,'fontsize',16)
% % axis square
% 
% 
% % error estimation
% for j=1:length(t)
%     error(j)=norm(X_DMD(:,j)-X(:,j));
% end
% 
% figure
% semilogy(t,error,'k','LineWidth',2)
% xlim([0 max(t)])
% xlabel('Time')
% ylabel('Error')
% set(gca,'fontsize',14)
% set(gca,'TickLabelInterpreter','latex')
% 
